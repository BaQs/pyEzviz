import json
import requests
import logging
import hashlib
import time
from random import randint
from uuid import uuid4
from pyezviz.camera import EzvizCamera

COMMON_DEVICE_CATEGORY = "COMMON"
CAMERA_DEVICE_CATEGORY = "IPC"
BATTERY_CAMERA_DEVICE_CATEGORY = "BatteryCamera"
DOORBELL_DEVICE_CATEGORY = "BDoorBell"

API_BASE_TLD = ".ezvizlife.com"
API_ENDPOINT_AUTH = "/doLogin"
API_ENDPOINT_CLOUDDEVICES = "/api/cloud/v2/cloudDevices/getAll"
API_ENDPOINT_PAGELIST = "/v3/userdevices/v1/devices/pagelist"
API_ENDPOINT_DEVICES = "/v3/devices/"
API_ENDPOINT_SWITCH_STATUS = '/device/deviceSwitch!configDeviceSwitchStatus.action'
API_ENDPOINT_PTZCONTROL = "/ptzControl"
API_ENDPOINT_ALARM_SOUND = "/alarm/sound"
API_ENDPOINT_SET_DEFENCE = "/camera/cameraAction!enableDefence.action"
API_ENDPOINT_DETECTION_SENSIBILITY = "/api/device/configAlgorithm"
API_ENDPOINT_DETECTION_SENSIBILITY_GET = "/api/device/queryAlgorithmConfig"
API_ENDPOINT_CAMERA_INFO_GET = "/camera/cameraAction!findAllDevices.action"
API_ENDPOINT_ALARMINFO_GET = "/alarmlog/alarmLogAction!findAlarmLogs.action"
API_ENDPOINT_CHECKLOGIN = "/user/user/userAction!checkLoginInfo.action"
API_ENDPOINT_SET_DEFENCE_SCHEDULE = "/camera/cameraAction!modifyTimerDefence.action"

DEFAULT_TIMEOUT = 10
MAX_RETRIES = 3

class PyEzvizError(Exception):
    pass


class EzvizClient(object):
    def __init__(self, account, password, region="eu", session=None, timeout=None, cloud=None, connection=None):
        """Initialize the client object."""
        self.account = account
        self.password = password
        self._session = session
        self._data = {}
        self._timeout = timeout
        self._CLOUD = cloud
        self._CONNECTION = connection
        self._csrfToken = 0
        self._API_DOMAIN = "i" + region
        self._AUTH_DOMAIN = region + "auth"

    def _login(self):
        """Login to Ezviz' API."""

        # Ezviz API sends md5 of password
        m = hashlib.md5()
        m.update(self.password.encode('utf-8'))
        md5pass = m.hexdigest()
        randommath = randint(1000000000000000000, 9999999999999999999)
        payload = {"account": self.account, "password": md5pass, "from": "4e4148ba90184a7cbd81", "r": randommath, "returnUrl": "plugin", "host": self._API_DOMAIN + API_BASE_TLD}

        try:
            req = self._session.post("https://" + self._AUTH_DOMAIN + API_BASE_TLD + API_ENDPOINT_AUTH,
                                allow_redirects=False,
                                data=payload,
                                timeout=self._timeout)
        
            json_result = req.json()

            if json_result['retcode'] == "1001":
                print("Login error: Incorrect login details")
                raise PyEzvizError("Incorrect login details")

            elif json_result['retcode'] == "1002":
                print("Login error: Captcha required")
                raise PyEzvizError("Login error: Captcha required")

            elif json_result['retcode'] == "1005":
                print("Login error: Incorrect Captcha code")
                raise PyEzvizError("Login error: Incorrect Captcha code")

            else:
                #Update cookie with JS Session ID that is generated by website.

                req = self._session.get("https://" + self._API_DOMAIN + API_BASE_TLD + "/check_plugin.jsp",
                                        timeout=self._timeout)
                self._csrfToken = self._session.cookies['AS_SessionID']

        except OSError:
            raise PyEzvizError("Can not login to API")

        if req.status_code != 200:
            raise PyEzvizError("Login error: Please check your username/password: %s ", str(req.text))
        
        return True

    def _get_pagelist(self, filter=None, json_key=None, max_retries=0):
        """Get data from pagelist API."""

        if max_retries > MAX_RETRIES:
            raise PyEzvizError("Can't gather proper data. Max retries exceeded.")

        if filter == None:
            raise PyEzvizError("Trying to call get_pagelist without filter")

        try:
            req = self._session.get("https://" + self._API_DOMAIN + API_BASE_TLD + API_ENDPOINT_PAGELIST,
                                    params={'filter': filter},
                                    timeout=self._timeout)

        except OSError as e:
            raise PyEzvizError("Could not access Ezviz' API: " + str(e))
            
        if req.status_code == 401:
        # session is wrong, need to relogin
            self.login()
            logging.info("Got 401, relogging (max retries: %s)",str(max_retries))
            return self._get_pagelist(self, filter, json_key, max_retries+1)

        if req.text is "":
            raise PyEzvizError("No data")

        try:
            json_output = req.json()
        except (OSError, json.decoder.JSONDecodeError) as e:
            raise PyEzvizError("Impossible to decode response: " + str(e) + "\nResponse was: " + str(req.text))

        if json_key == None:
            json_result = json_output
        else:
            json_result = json_output[json_key]

        if not json_result:
            raise PyEzvizError("Impossible to load the devices, here is the returned response: %s ", str(req.text))

        return json_result

    def _get_deviceinfo(self, serial, max_retries=0):
        """Get data from a device info API."""
        if max_retries > MAX_RETRIES:
            raise PyEzvizError("Can't gather proper data. Max retries exceeded.")

        try:
            req = self._session.get("https://" + self._API_DOMAIN + API_BASE_TLD + API_ENDPOINT_CAMERA_INFO_GET,
                                    timeout=self._timeout)

        except OSError as e:
            raise PyEzvizError("Could not access Ezviz' API: " + str(e))
            
        if req.status_code == 401 or req.status_code == 302:
        #session is wrong, need to relogin
           self.login()
           logging.info("Got 302, relogging (max retries: %s)",str(max_retries))
           return self._get_deviceinfo(self, serial, max_retries+1)

        if req.text is "":
           raise PyEzvizError("No data")

        try:
            json_output = req.json()

        except (OSError, json.decoder.JSONDecodeError) as e:
            raise PyEzvizError("Impossible to decode response: " + str(e) + "\nResponse was: " + str(req.text))

        for device in json_output['devices']:
            if device['subSerial'] == serial:
                json_result = device
                break

        if not json_result:
            raise PyEzvizError("Impossible to load the devices, here is the returned response: %s ", str(req.text))

        return json_result

    #Get Alarm info
    def _get_alarminfo(self, serial, alarmType=-1, pageStart=0, pageSize=1, max_retries=0):
        """Get data from a device info API."""
        if max_retries > MAX_RETRIES:
            raise PyEzvizError("Can't gather proper data. Max retries exceeded.")

        try:
            req = self._session.post("https://" + self._API_DOMAIN + API_BASE_TLD + API_ENDPOINT_ALARMINFO_GET,
                                    data={ 'objectName': serial,
                                          'alarmType': alarmType,
                                          'queryType' : '3',
                                          'checkState' : '2',
                                          'pageStart' : pageStart,
                                          'pageSize' : pageSize},
                                    timeout=self._timeout)

        except OSError as e:
            raise PyEzvizError("Could not access Ezviz' API: " + str(e))
            
        if req.status_code == 401 or req.status_code == 302:
        #session is wrong, need to relogin
           self.login()
           logging.info("Got 302 or 401, relogging (max retries: %s)",str(max_retries))
           return self._get_alarminfo(self, serial, alarmType, pageStart, pageSize, max_retries+1)

        if req.text is "":
           raise PyEzvizError("No data")

        try:
            json_output = req.json()
        except (OSError, json.decoder.JSONDecodeError) as e:
            raise PyEzvizError("Impossible to decode response: " + str(e) + "\nResponse was: " + str(req.text))

        return json_output

    def _switch_status(self, serial, status_type, enable, max_retries=0):
        """Switch status on a device"""

        try:
            req = self._session.post("https://" + self._API_DOMAIN + API_BASE_TLD + API_ENDPOINT_SWITCH_STATUS,
                                    data={  'enable': enable,
                                            'serial': serial,
                                            'channelNo': '1',
                                            'type': status_type},
                                    timeout=self._timeout)

        except OSError as e:
            raise PyEzvizError("Could not access Ezviz' API: " + str(e))

        if req.status_code == 401 or req.status_code == 302:
        #session is wrong, need to relogin
           self.login()
           logging.info("Got 302 or 401, relogging (max retries: %s)",str(max_retries))
           return self._switch_status(self, serial, status_type, enable, max_retries+1)

        try:
            json_output = req.json()
        
        except (OSError, json.decoder.JSONDecodeError) as e:
            raise PyEzvizError("Impossible to decode response: " + str(e) + "\nResponse was: " + str(req.text))
            
        if json_output['resultCode'] != '0':
            raise PyEzvizError("Could not set the switch, maybe a permission issue ?: Got %s : %s)",str(req.status_code), str(req.text))
            return False
            
        return True

    def load_cameras(self):
        """Load and return all cameras objects"""

        # get all devices
        devices = self.get_DEVICE()
        cameras = []
        supported_categories = [COMMON_DEVICE_CATEGORY, CAMERA_DEVICE_CATEGORY, BATTERY_CAMERA_DEVICE_CATEGORY, DOORBELL_DEVICE_CATEGORY]

        # foreach, launch a switchstatus for the proper serial
        for idx, device in enumerate(devices):
            if devices[idx]['deviceCategory'] in supported_categories:
                # Add support for connected HikVision cameras
                if devices[idx]['deviceCategory'] == COMMON_DEVICE_CATEGORY and not devices[idx]['hik']:
                    next

                # Create camera object
                camera = EzvizCamera(self, device['deviceSerial'])
                camera.load()
                cameras.append(camera.status())

        return cameras

    def ptzControl(self, command, serial, action, speed=5, max_retries=0):
        """PTZ Control by API."""
        if max_retries > MAX_RETRIES:
            raise PyEzvizError("Can't gather proper data. Max retries exceeded.")

        if command == None:
            raise PyEzvizError("Trying to call ptzControl without command")
        if action == None:
            raise PyEzvizError("Trying to call ptzControl without action")


        try:
            req = self._session.put("https://" + self._API_DOMAIN + API_BASE_TLD + API_ENDPOINT_DEVICES + serial + API_ENDPOINT_PTZCONTROL,
                                    data={'command': command,
                                        'action': action,
                                        'channelNo': "1",
                                        'speed': speed,
                                        'uuid': str(uuid4()),
                                        'serial': serial},
                                    headers={'clientType': "1"},
                                    timeout=self._timeout)

        except OSError as e:
            raise PyEzvizError("Could not access Ezviz' API: " + str(e))
            
        if req.status_code == 401:
        # session is wrong, need to re-log-in
            self.login()
            logging.info("Got 401, relogging (max retries: %s)",str(max_retries))
            return self.ptzControl(self, command, serial, action, speed, max_retries+1)
        
        return True

    def login(self):
        """Set http session."""
        if self._session == None:
            self._session = requests.session()
            self._login()

        try:
            req = self._session.get("https://" + self._API_DOMAIN + API_BASE_TLD + API_ENDPOINT_CHECKLOGIN,
                                                     allow_redirects=False,
                                                     timeout=self._timeout)

        except OSError as e:
            raise PyEzvizError("Could not access Ezviz login check API: " + str(e))
 
        if req.status_code != 200:
            #session is wrong, need to relogin
            self._login()

        else:
           response_json = req.json()
           if response_json["success"] != "success":
               self._login()
   
        return True

    def data_report(self, serial, enable=1, max_retries=0):
        """Enable alarm notifications."""
        if max_retries > MAX_RETRIES:
            raise PyEzvizError("Can't gather proper data. Max retries exceeded.")

        try:
            req = self._session.post("https://" + self._API_DOMAIN + API_BASE_TLD + API_ENDPOINT_SET_DEFENCE,
                                    data={  'deviceSerial' : serial,
                                            'defenceType': 'Global',
                                            'enablePlan': enable,
                                            'channelNo': '1',
                                    },
                                    timeout=self._timeout)

        except OSError as e:
            raise PyEzvizError("Could not access Ezviz' API: " + str(e))

        if req.status_code == 401 or req.status_code == 302:
        #session is wrong, need to relogin
           self.login()
           logging.info("Got 302 or 401, relogging (max retries: %s)",str(max_retries))
           return self.data_report(self, serial, enable, max_retries+1)

        try:
            json_output = req.json()
        
        except (OSError, json.decoder.JSONDecodeError) as e:
            raise PyEzvizError("Impossible to decode response: " + str(e) + "\nResponse was: " + str(req.text))
            
        if json_output['resultCode'] != '0':
            raise PyEzvizError("Could not set the switch, maybe a permission issue ?: Got %s : %s)",str(req.status_code), str(req.text))
            return False

        return True

    def api_set_defence_schdule(self, serial, schedule, enable, max_retries=0):
        """Set defence schedules."""
        if max_retries > MAX_RETRIES:
            raise PyEzvizError("Can't gather proper data. Max retries exceeded.")
        schedule = '{"WD":0,"TP":[{"BT":"00:00","ET":"05:00"},{"BT":"21:00","ET":"23:59"}]},{"WD":1,"TP":[{"BT":"00:00","ET":"05:00"},{"BT":"21:00","ET":"23:59"}]},{"WD":2,"TP":[{"BT":"00:00","ET":"05:00"},{"BT":"21:00","ET":"23:59"}]},{"WD":3,"TP":[{"BT":"00:00","ET":"05:00"},{"BT":"21:00","ET":"23:59"}]},{"WD":4,"TP":[{"BT":"00:00","ET":"05:00"},{"BT":"21:00","ET":"23:59"}]},{"WD":5,"TP":[{"BT":"00:00","ET":"05:00"},{"BT":"21:00","ET":"23:59"}]},{"WD":6,"TP":[{"BT":"00:00","ET":"05:00"},{"BT":"21:00","ET":"23:59"}'
        schedulestring = '{"CN":0,"EL":' + str(enable) +',"SS":"' + serial + '","WP":[' + schedule + ']}]}'
        try:
            req = self._session.post("https://" + self._API_DOMAIN + API_BASE_TLD + API_ENDPOINT_SET_DEFENCE_SCHEDULE,
                                    data={  'serial' : serial,
                                            'csrfToken': self._csrfToken,
                                            'devTimingPlan': schedulestring,
                                    },
                                    timeout=self._timeout)

        except OSError as e:
            raise PyEzvizError("Could not access Ezviz' API: " + str(e))

        if req.status_code != 200:
        #session is wrong, need to relogin
           self.login()
           logging.info("Got", req.status_code," relogging (max retries: %s)",str(max_retries))
           return api_set_defence_schdule(self, serial, schedule, enable, max_retries+1)

        try:
            json_output = req.json()
        
        except (OSError, json.decoder.JSONDecodeError) as e:
            raise PyEzvizError("Impossible to decode response: " + str(e) + "\nResponse was: " + str(req.text))
            
        if json_output['resultCode'] != '0':
            raise PyEzvizError("Could not set the switch, maybe a permission issue ?: Got %s : %s)",str(req.status_code), str(req.text))
            return False

        return True

    def detection_sensibility(self, serial, sensibility=3, type_value=3, max_retries=0):
        """Set detection sensibility."""
        if max_retries > MAX_RETRIES:
            raise PyEzvizError("Can't gather proper data. Max retries exceeded.")

        if sensibility not in [0,1,2,3,4,5,6] and type_value == 0:
            raise PyEzvizError("Unproper sensibility (should be within 1 to 6).")

        try:
            req = self._session.post("https://" + self._API_DOMAIN + API_BASE_TLD + API_ENDPOINT_DETECTION_SENSIBILITY,
                                    data={  'subSerial' : serial,
                                            'type': type_value,
                                            'channelNo' : '1',
                                            'value': sensibility,
                                    },
                                    timeout=self._timeout)

        except OSError as e:
            raise PyEzvizError("Could not access Ezviz' API: " + str(e))
            
        if req.status_code == 401:
        # session is wrong, need to re-log-in
            self.login()
            logging.info("Got 401, relogging (max retries: %s)",str(max_retries))
            return self.detection_sensibility(self, serial, sensibility, type_value, max_retries+1)

        response_json = req.json()
        if response_json['resultCode'] and response_json['resultCode'] != '0':
            # raise PyEzvizError("Could not get detection sensibility: Got %s : %s)",str(req.status_code), str(req.text))
            return 'Unknown error'

        return True

    def get_detection_sensibility(self, serial, type_value=3, max_retries=0):
        """Get detection sensibility notifications."""
        if max_retries > MAX_RETRIES:
            raise PyEzvizError("Can't gather proper data. Max retries exceeded.")

        try:
            req = self._session.post("https://" + self._API_DOMAIN + API_BASE_TLD + API_ENDPOINT_DETECTION_SENSIBILITY_GET,
                                    data={  'subSerial' : serial,
                                    },
                                    timeout=self._timeout)

        except OSError as e:
            raise PyEzvizError("Could not access Ezviz' API: " + str(e))
            
        if req.status_code == 401:
        # session is wrong, need to re-log-in
            self.login()
            logging.info("Got 401, relogging (max retries: %s)",str(max_retries))
            return self.get_detection_sensibility(self, serial, type_value, max_retries+1)

        response_json = req.json()
        if response_json['resultCode'] != '0':
            return 'Unknown'
        else:
            for idx in response_json['algorithmConfig']['algorithmList']:
                if idx['type'] == str(type_value):
                    return idx['value']

    # soundtype: 0 = normal, 1 = intensive, 2 = disabled ... don't ask me why...
    def alarm_sound(self, serial, soundType, enable=1, max_retries=0):
        """Enable alarm sound by API."""
        if max_retries > MAX_RETRIES:
            raise PyEzvizError("Can't gather proper data. Max retries exceeded.")

        if soundType not in [0,1,2]:
            raise PyEzvizError("Invalid soundType, should be 0,1,2: " + str(soundType))

        try:
            req = self._session.put("https://" + self._API_DOMAIN + API_BASE_TLD + API_ENDPOINT_DEVICES + serial + API_ENDPOINT_ALARM_SOUND,
                                    data={  'enable': enable,
                                            'soundType': soundType,
                                            'voiceId': '0',
                                            'deviceSerial': serial
                                    },
                                    timeout=self._timeout)

        except OSError as e:
            raise PyEzvizError("Could not access Ezviz' API: " + str(e))
            
        if req.status_code == 401:
        # session is wrong, need to re-log-in
            self.login()
            logging.info("Got 401, relogging (max retries: %s)",str(max_retries))
            return self.alarm_sound(self, serial, soundType, enable, max_retries+1)
        elif req.status_code != 200:
            logging.error("Got %s : %s)",str(req.status_code), str(req.text))

        return True

    def switch_status(self, serial, status_type, enable=0):
        """Switch status of a device."""
        return self._switch_status(serial, status_type, enable)

    def get_PAGE_LIST(self, max_retries=0):
        return self._get_pagelist(filter='CLOUD,TIME_PLAN,CONNECTION,SWITCH,STATUS,WIFI,STATUS_EXT,NODISTURB,P2P,TTS,KMS,HIDDNS', json_key=None)

    def get_DEVICE(self, max_retries=0):
        return self._get_pagelist(filter='CLOUD',json_key='deviceInfos')

    def get_CONNECTION(self, max_retries=0):
        return self._get_pagelist(filter='CONNECTION',json_key='connectionInfos')

    def get_STATUS(self, max_retries=0):
        return self._get_pagelist(filter='STATUS',json_key='statusInfos')

    def get_SWITCH(self, max_retries=0):
        return self._get_pagelist(filter='SWITCH',json_key='switchStatusInfos')

    def get_WIFI(self, max_retries=0):
        return self._get_pagelist(filter='WIFI',json_key='wifiInfos')

    def get_NODISTURB(self, max_retries=0):
        return self._get_pagelist(filter='NODISTURB',json_key='alarmNodisturbInfos')

    def get_P2P(self, max_retries=0):
        return self._get_pagelist(filter='P2P',json_key='p2pInfos')

    def get_KMS(self, max_retries=0):
        return self._get_pagelist(filter='KMS',json_key='kmsInfos')

    def get_TIME_PLAN(self, max_retries=0):
        return self._get_pagelist(filter='TIME_PLAN',json_key='timePlanInfos')

    def close_session(self):
        """Close current session."""
        self._session.close()
        self._session = None